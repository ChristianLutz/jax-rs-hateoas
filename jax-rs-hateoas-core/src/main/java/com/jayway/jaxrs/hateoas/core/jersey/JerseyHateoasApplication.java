/*
 * Copyright 2011 the original author or authors.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.jayway.jaxrs.hateoas.core.jersey;

import com.jayway.jaxrs.hateoas.*;
import com.jayway.jaxrs.hateoas.core.HateoasResponse.HateoasResponseBuilder;
import com.jayway.jaxrs.hateoas.support.DefaultCollectionWrapperStrategy;
import com.jayway.jaxrs.hateoas.support.JavassistHateoasLinkInjector;
import com.sun.jersey.api.core.PackagesResourceConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.util.Set;

/**
 * JAX-RS Application adding HATEOAS capability to a Jersey application. Subclass this to add hypermedia capability
 * to your Jersey application.
 *
 * @author Mattias Hellborg Arthursson
 * @author Kalle Stenflo
 */
public abstract class JerseyHateoasApplication extends PackagesResourceConfig {

    private static final Logger log = LoggerFactory.getLogger(JerseyHateoasApplication.class);

    /**
     * If set this will determine the verbosity of the links generated by this
     * application
     * <p/>
     * The instance may be a String that contains either one or more
     * names from the enum {@link HateoasOption} class separated by ';', ','
     * or a single verbosity name defined in {@link HateoasVerbosity}.
     * <p/>
     *
     * @see com.jayway.jaxrs.hateoas.HateoasVerbosity
     * @see com.jayway.jaxrs.hateoas.HateoasOption
     */
    public static final String PROPERTY_HATEOAS_VERBOSITY = "com.jayway.jaxrs.hateoas.verbosity";

    /**
     * If set specifies the implementation class of the {@link HateoasLinkInjector}
     * <p>
     * The type of this property must be a String that is a Class name,
     * and the Class must a sub-class of
     * {@link HateoasLinkInjector}.
     * <p>
     * If not set the default {@link HateoasLinkInjector} implementation will be used.
     */
    public static final String PROPERTY_HATEOAS_LINK_INJECTOR = "com.jayway.jaxrs.hateoas.linkInjector";

    /**
     * If set specifies the implementation class of the {@link CollectionWrapperStrategy}
     * <p>
     * The type of this property must be a String that is a Class name,
     * and the Class must a sub-class of
     * {@link CollectionWrapperStrategy}.
     * <p>
     * If not set the default {@link CollectionWrapperStrategy} implementation will be used.
     */
    public static final String PROPERTY_HATEOAS_COLLECTION_WRAPPER_STRATEGY = "com.jayway.jaxrs.hateoas.collectionWrapperStrategy";

    public JerseyHateoasApplication(String... packages) {
        this(HateoasVerbosity.MAXIMUM, packages);
    }

    public JerseyHateoasApplication(HateoasVerbosity verbosity,
                                    String... packages) {
        this(new JavassistHateoasLinkInjector(), new DefaultCollectionWrapperStrategy(), verbosity, packages);
    }

    /**
     * Creates a new Application with he given {@link HateoasVerbosity} level.
     *
     * @param verbosity the verbosity level to use in the application
     * @param props properties to be passed to {@link PackagesResourceConfig} constructor
     */
    public JerseyHateoasApplication(HateoasVerbosity verbosity,
                                    Map<String, Object> props) {
        this(new JavassistHateoasLinkInjector(), new DefaultCollectionWrapperStrategy(), verbosity, props);
    }

    /**
     * Creates a new Application based on Servlet init params. Note the HATEOAS 
     * properties can be combined with standard Jersey properties defined in
     * {@link com.sun.jersey.api.core.ResourceConfig}
     *
     * @see JerseyHateoasApplication#PROPERTY_HATEOAS_VERBOSITY
     * @see JerseyHateoasApplication#PROPERTY_HATEOAS_LINK_INJECTOR
     * @see JerseyHateoasApplication#PROPERTY_HATEOAS_COLLECTION_WRAPPER_STRATEGY
     *
     * @param props properties to be passed to {@link PackagesResourceConfig} constructor
     */
    public JerseyHateoasApplication(Map<String, Object> props) {
        this(createLinkInjector(props),
             createCollectionWrapperStrategy(props),
             createHateoasVerbosity(props),
             props);
    }

    public JerseyHateoasApplication(HateoasLinkInjector<Object> linkInjector,
                                    CollectionWrapperStrategy collectionWrapperStrategy,
                                    HateoasVerbosity verbosity,
                                    Map<String, Object> props) {
        super(props);

        Set<Class<?>> allClasses = getClasses();
        for (Class<?> clazz : allClasses) {
            HateoasContextProvider.getDefaultContext().mapClass(clazz);
        }

        HateoasResponseBuilder.configure(linkInjector, collectionWrapperStrategy);
        HateoasVerbosity.setDefaultVerbosity(verbosity);

        JerseyHateoasContextFilter filter = new JerseyHateoasContextFilter();

        super.getContainerRequestFilters().add(filter);
        super.getContainerResponseFilters().add(filter);
    }

    public JerseyHateoasApplication(HateoasLinkInjector<Object> linkInjector,
                                    CollectionWrapperStrategy collectionWrapperStrategy, HateoasVerbosity verbosity,
                                    String... packages) {
        super(packages);

        Set<Class<?>> allClasses = getClasses();
        for (Class<?> clazz : allClasses) {
            HateoasContextProvider.getDefaultContext().mapClass(clazz);
        }

        HateoasResponseBuilder.configure(linkInjector, collectionWrapperStrategy);
        HateoasVerbosity.setDefaultVerbosity(verbosity);

        JerseyHateoasContextFilter filter = new JerseyHateoasContextFilter();

        super.getContainerRequestFilters().add(filter);
        super.getContainerResponseFilters().add(filter);
    }

    //
    //
    // Private utility methods
    //
    //
    private static CollectionWrapperStrategy createCollectionWrapperStrategy(Map<String, Object> props) {
        String implClass = (String) props.get(PROPERTY_HATEOAS_COLLECTION_WRAPPER_STRATEGY);

        if (implClass != null && !implClass.trim().isEmpty()) {
            try {
                Class<?> impl = Class.forName(implClass);
                return (CollectionWrapperStrategy) impl.newInstance();
            } catch (Exception e) {
                throw new RuntimeException("Could not create instance of CollectionWrapperStrategy: " + implClass, e);
            }
        } else {
            return new DefaultCollectionWrapperStrategy();
        }
    }

    private static HateoasLinkInjector<Object> createLinkInjector(Map<String, Object> props) {
        String implClass = (String) props.get(PROPERTY_HATEOAS_LINK_INJECTOR);

        if (implClass != null && !implClass.trim().isEmpty()) {
            try {
                Class<?> impl = Class.forName(implClass);
                return (HateoasLinkInjector<Object>) impl.newInstance();
            } catch (Exception e) {
                throw new RuntimeException("Could not create instance of HateoasLinkInjector: " + implClass, e);
            }
        } else {
            return new JavassistHateoasLinkInjector();
        }
    }

    private static HateoasVerbosity createHateoasVerbosity(Map<String, Object> props) {

        String verbosityConfig = (String) props.get(PROPERTY_HATEOAS_VERBOSITY);

        if (verbosityConfig != null && !verbosityConfig.trim().isEmpty()) {
            HateoasVerbosity verbosity = HateoasVerbosity.findByName(verbosityConfig);
            if (verbosity != null) {
                return verbosity;
            }
            return HateoasVerbosity.valueOf(verbosityConfig);
        } else {
            log.info("No HATEOAS verbosity defined in props. Using default verbosity (NORMAL)");
            return HateoasVerbosity.NORMAL;
        }

    }
}
