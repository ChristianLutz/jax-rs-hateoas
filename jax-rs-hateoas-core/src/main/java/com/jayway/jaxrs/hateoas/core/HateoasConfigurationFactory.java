package com.jayway.jaxrs.hateoas.core;

import com.jayway.jaxrs.hateoas.CollectionWrapperStrategy;
import com.jayway.jaxrs.hateoas.HateoasLinkInjector;
import com.jayway.jaxrs.hateoas.HateoasVerbosity;
import com.jayway.jaxrs.hateoas.support.DefaultCollectionWrapperStrategy;
import com.jayway.jaxrs.hateoas.support.JavassistHateoasLinkInjector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

/**
 * Helper factory to create Hateoas configuration classes
 *
 * @author Kalle Stenflo
 */
public class HateoasConfigurationFactory {

    private static final Logger logger = LoggerFactory.getLogger(HateoasConfigurationFactory.class);

    /**
     * If set this will determine the verbosity of the links generated by this
     * application
     * <p/>
     * The instance may be a String that contains either one or more
     * names from the enum {@link com.jayway.jaxrs.hateoas.HateoasOption} class separated by ';', ','
     * or a single verbosity name defined in {@link com.jayway.jaxrs.hateoas.HateoasVerbosity}.
     * <p/>
     *
     * @see com.jayway.jaxrs.hateoas.HateoasVerbosity
     * @see com.jayway.jaxrs.hateoas.HateoasOption
     */
    public static final String PROPERTY_HATEOAS_VERBOSITY = "com.jayway.jaxrs.hateoas.verbosity";

    /**
     * If set specifies the implementation class of the {@link com.jayway.jaxrs.hateoas.HateoasLinkInjector}
     * <p/>
     * The type of this property must be a String that is a Class name,
     * and the Class must a sub-class of
     * {@link com.jayway.jaxrs.hateoas.HateoasLinkInjector}.
     * <p/>
     * If not set the default {@link com.jayway.jaxrs.hateoas.HateoasLinkInjector} implementation will be used.
     */
    public static final String PROPERTY_HATEOAS_LINK_INJECTOR = "com.jayway.jaxrs.hateoas.linkInjector";

    /**
     * If set specifies the implementation class of the {@link com.jayway.jaxrs.hateoas.CollectionWrapperStrategy}
     * <p/>
     * The type of this property must be a String that is a Class name,
     * and the Class must a sub-class of
     * {@link com.jayway.jaxrs.hateoas.CollectionWrapperStrategy}.
     * <p/>
     * If not set the default {@link com.jayway.jaxrs.hateoas.CollectionWrapperStrategy} implementation will be used.
     */
    public static final String PROPERTY_HATEOAS_COLLECTION_WRAPPER_STRATEGY = "com.jayway.jaxrs.hateoas.collectionWrapperStrategy";

    @SuppressWarnings("unchecked")
    public static HateoasLinkInjector<Object> createLinkInjector(Map<String, Object> props) {
        HateoasLinkInjector<Object> linkInjector = null;

        Object linkInjectorProperty = props.get(PROPERTY_HATEOAS_LINK_INJECTOR);
        if (linkInjectorProperty == null) {
            logger.info("Using default LinkInjcetor");
            linkInjector = new JavassistHateoasLinkInjector();
        } else {
            logger.info("Using {} as LinkInjector", linkInjectorProperty);
            try {
                linkInjector = (HateoasLinkInjector<Object>)
                        Class.forName((String) linkInjectorProperty).newInstance();
            } catch (Exception e) {
                throw new RuntimeException("Failed to instantiate " + linkInjector);
            }
        }

        return linkInjector;
    }

    public static HateoasVerbosity createVerbosity(Map<String, Object> props) {
        String verbosityConfig = (String) props.get(PROPERTY_HATEOAS_VERBOSITY);

        if (verbosityConfig != null && !verbosityConfig.trim().isEmpty()) {
            HateoasVerbosity verbosity = HateoasVerbosity.findByName(verbosityConfig);
            if (verbosity != null) {
                return verbosity;
            }
            return HateoasVerbosity.valueOf(verbosityConfig);
        } else {
            logger.info("No HATEOAS verbosity defined in props. Using default verbosity (HateoasVerbosity.MAXIMUM)");
            return HateoasVerbosity.MAXIMUM;
        }
    }


    public static CollectionWrapperStrategy createCollectionWrapperStrategy(Map<String, Object> props) {
        Object propertyValue = props.get(PROPERTY_HATEOAS_COLLECTION_WRAPPER_STRATEGY);

        if (propertyValue == null) {
            logger.info("Using default CollectionWrapperStrategy");
            return new DefaultCollectionWrapperStrategy();
        } else {
            logger.info("Using {} as LinkInjector", propertyValue);
            try {
                return (CollectionWrapperStrategy) Class.forName((String) propertyValue).newInstance();
            } catch (Exception e) {
                throw new RuntimeException("Failed to instantiate " + propertyValue);
            }
        }
    }
}
